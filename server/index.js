/* jshint node: true */
'use strict';

/*
This file was generated by generator-ffwd,
you probably should not modify it
*/

var fs = require('fs');
var utils = require('ffwd-utils/server');
var _ = utils._;
var debug = utils.debug('ffwd-documents');
var marked = require('marked');
var yfm = require('yfm');
var toYaml = require('toYaml').toYaml;
var hljs = require('highlight.js');

// Synchronous highlighting with highlight.js
marked.setOptions({
  highlight: function (code) {
    return hljs.highlightAuto(code).value;
  }
});

/**
 * An example of feature implementation
 * @exports example-feature
 * @memberOf FFWD.server
 * @param  {Object} config ...
 * @return {Object}        ...
 */
module.exports = function(config) {
  config = config || {};
  var app = config.app;

  config.pages = config.pages || app.get('pages') || 'pages';
  config.navigation = config.navigation || {};
  var _navCache;


  // stoopid
  config.navigation = config.pages +'/navigation.yml';

  config.cache = typeof config.cache !== 'undefined' ?
                  config.cache :
                  (app.get('env') !== 'development');

  debug('cache documents menu %s %s', config.cache, app.get('env'));


  config.pagesBasePath = typeof config.pagesBasePath === 'undefined' ?
                          'pages' :
                          config.pagesBasePath
                          ;


  /**
   * Builds the navigation for a response.
   * @param  {connect.Request}  req  ...
   * @param  {connect.Response} res  ...
   * @param  {Function} next         ...
   */
  function extendMenu(req, res, next) {
    if (_navCache && config.cache !== false) {
      res.locals.navigation = _navCache;
      return next();
    }


    _navCache = {};
    if (!res.menu) {
      res.locals.navigation = _navCache;
      return next();
    }


    utils.glob(config.pages +'/**/*.{html,md}', function(err, files) {
      var pages = {};
      debug('extendMenu with %s entries', files.length);

      _.each(files, function(file) {
        // converts something like:
        // 'local-pages-folder/yada/doc.md'
        // into
        // 'url-pages-path/yada/doc'
        var urlPath = //config.pagesBasePath +'/'+
                      file
                      .slice((config.pages +'/').length)
                      .split('.')
                      .slice(0, -1)
                      .join('.');

        var page = {};
        try {
          page = yfm.read(file).context;
        }
        catch (err) {
          console.trace();
          debug('reading %s %s', file, err);
        }

        pages[urlPath] = page;
      });


      res.menu.extend(pages);

      _navCache = res.menu.tree;
      debug('menu.tree', JSON.stringify(res.menu.tree.guides, null, 2));

      res.locals.navigation = _navCache;
      next();
    });
  }

  function pageEditRender(req, res, next) {
    fs.readFile(app.get('views') +'/partials/page-edit.tpl', {
      encoding: 'utf8'
    }, function(nope, str) {
      if (nope) { return next(nope); }
      res.locals.page.body = _.template(str, res.locals);
      res.locals.page.title = 'Edit: '+ res.locals.page.title;
      next();
    });
  }

  function docFilepath(req, next) {
    var name = req.url
                .split('?')
                .shift()
                .slice(1)
                ;
    name = name.slice(-1) === '/' ?
            name.slice(0, -1) :
            name;

    var match = config.pages +'/'+ name +'{.md,.html,/index.md,/index.html}';

    debug('doc name "%s" "%s", "%s"', req.url, name, match);

    utils.glob(match, function(err, files) {
      if (err) { return next(err); }
      if (!files.length) {
        return next(new Error('No files in '+ config.pagesBasePath));
      }

      var filename = files.shift();

      debug('filename for "%s" "%s": "%s"', config.pages, name, filename);
      next(filename ? null : new Error('Cannot find '+ match), filename);
    });
  }

  /**
   * Reponse callback for /docs requests
   * @param  {connect.Request}   req  ...
   * @param  {connect.Response}   res  ...
   * @param  {Function} next ...
   */
  function docRequest(req, res, next) {
    debug('docRequest has request user?', req.user);
    // debug('docRequest has request session.passport?', req.session.passport);

    docFilepath(req, function(nope, filename) {
      if (nope) { return res.send(404); }

      if (!_.isUndefined(req.query.edit)) {
        return docEditRequest(req, res, next);
      }

      var content = yfm.read(filename);

      _.extend(res.locals.page, content.context);

      res.locals.page.body = marked.parse(content.content)
                              .replace(/ref:asset:/g, '')
                              .replace(/asset:/g, '')
                              .replace(/ref:/g, config.pagesBasePath)
                              ;
      res.locals.page.header = res.renderPartial('page-header');
      res.locals.page.footer = res.renderPartial('page-footer');

      res.render('default');
    });
  }

  function docEditRequest(req, res, next) {
    debug('docEditRequest has request user?', req.user);
    if (_.isUndefined(req.query.edit)) {
      return next();
    }

    docFilepath(req, function(err, filename) {
      if (err) { return next(err); }
      var content = yfm.read(filename);

      _.extend(res.locals.page, content.context);

      res.locals.page.vars = Object.keys(content.context).concat(['location']);

      res.locals.page.body = content.content;
      res.locals.page.location = req.url.split('?').shift();
      res.locals.page.header = res.renderPartial('page-header');
      res.locals.page.footer = res.renderPartial('page-footer');

      var format = req.accepts(['json', 'html']);

      if (format === 'json') {
        var json = _.clone(res.locals.page);
        // cleanup??
        return res.send(json);
      }

      pageEditRender(req, res, function(err) {
        if (err) { return next(err); }
        res.render('default');
      });
    });
  }

  function docUpdateRequest(req, res, next) {
    docFilepath(req, function(err, filename) {
      debug('docUpdateRequest', filename);
      if (err) { return next(err); }

      var body = req.body.body;
      var vars = _.clone(req.body);
      delete vars.location;
      delete vars.body;

      console.info('vars', vars);

      fs.writeFile(filename, [
        '---',
        toYaml(vars),
        '---',
        body
      ].join('\n'), function(err) {
        if (err) { return next(err); }
        req.query.edit = true;
        docEditRequest(req, res, next);
      });
    });
  }

  function docCreateRequest(req, res, next) {
    debug('docCreateRequest has request session.passport?', req.session.passport);

    var content = {
      context: _.clone(req.query),
      content: req.query.body || ''
    };

    delete content.context.body;

    _.extend(res.locals.page, content.context);

    res.locals.page.vars = Object.keys(content.context || {});

    res.locals.page.body = content.content;
    res.locals.page.header = res.renderPartial('page-header');
    res.locals.page.footer = res.renderPartial('page-footer');

    pageEditRender(req, res, function(err) {
      if (err) { return next(err); }
      res.render('default');
    });
  }

  return {
    extendMenu: extendMenu,

    docRequest: docRequest,

    docEditRequest: docEditRequest,

    docCreateRequest: docCreateRequest,

    docUpdateRequest: docUpdateRequest,

    pageEditRender: pageEditRender
  };
};
